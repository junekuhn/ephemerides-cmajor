

graph Microtones [[main]]
{
    //defining inputs and outputs
    output stream float out;
    input gain.volume;
    // input wave.frequencyIn;
    input event std::midi::Message midiIn;
    // input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float32 myShape [[ name: "shape", min: 0, max: 4, init: 0]];

    const int numVoices = 8;
    


    //create oscillator
    // node wave = std::oscillators::PolyblepOscillator (float, std::oscillators::Shape::sine, 440);
    node gain = std::levels::SmoothedGain (float);
    //envelope
    // node env = std::envelopes::FixedASR ( 0.1f, 0.8f );
    node voices = Voice[8];
    node voiceAllocator = std::voices::VoiceAllocator(8);

    //connect nodes together
    connection {
        //send a NoteOn to eventin
        midiIn -> std::midi::MPEConverter -> voiceAllocator;
        voiceAllocator.voiceEventOut -> voices.notesIn;
        myShape -> voices.shape;
        // env.gainOut * wave.out -> gain.in;
        voices.out -> gain.in;
        gain.out -> out;
    }
}

graph Voice {
    input event (std::notes::NoteOn, std::notes::NoteOff) notesIn;
    //there's like an inheritance thing going on / polymorphism?
    input event float32 shape;
    // wave.shapeIn;
    output stream float out;

    node {
        //envelope
        env = std::envelopes::FixedASR ( 0.1f, 0.8f ); 
        // freqCalculator = FreqCalculator;
        wave = std::oscillators::PolyblepOscillator (float, std::oscillators::Shape::sine, 440);
    }

    connection {
        notesIn -> env.eventIn;
        shape -> wave.shapeIn;
        // freqCalculator.out -> wave.frequencyIn;
        env.gainOut * wave.out -> out;
    }
}

