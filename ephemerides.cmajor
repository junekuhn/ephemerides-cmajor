namespace E {
    enum Algorithm {
    Arithmetic, Ratio, Tet
    }
}



graph Microtones [[main]]
{
    //defining inputs and outputs
    output stream float out;
    // input gain.volume;
    input event float volume [[ name: "Volume", min: -60, max: 0, init: -10]];
    // input wave.frequencyIn;
    input event std::midi::Message midiIn;
    // input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    input event float32 myShape [[ name: "shape", min: 0, max: 4, init: 0, step: 1, text: "Sine|Square|Saw|Triangle"]];
    input event int algorithmSelect [[ name: "algo", text: "Arithmetic|Ratio|Tet"]];
    input event int topValue [[ name: "Numerator", min: 1, max: 24, init: 2, step: 1]];
    input event  int bottomValue [[ name: "Denominator", min: 1, max: 24, init: 1, step: 1]];
    input event int divisor [[ name: "Divisor", min: 2, max: 24, init: 12, step: 1]];
    input event float glide [[ name: "Glide", min: 1, max: 100, init: 0.1, step: 1]];
    input event float baseFrequency [[ name: "Base Frequency", min: 0, max: 127, init: 10, step: 1]];
    input event bool droneMode [[ name: "Drone Mode", init: false, step:1]];

    //asdr
    input event float attack [[ name: "Attack", min: 0.01, max: 0.25, init: 0.1 ]];
    input event float release [[ name: "Release", min: 0.01, max: 4.0, init: 0.1 ]];




    const int numVoices = 8; 
    const int numKeys = 24;

    //create oscillator
    // node wave = std::oscillators::PolyblepOscillator (float, std::oscillators::Shape::sine, 440);
    node gain = std::levels::SmoothedGain (float);
    node myGain = myGain;
    //envelope
    // node env = std::envelopes::FixedASR ( 0.1f, 0.8f );
    node voices = Voice[8];
    node voiceAllocator = customVoiceAllocator(8);

    //connect nodes together
    connection {
        //send a NoteOn to eventin
        midiIn -> std::midi::MPEConverter;
        std::midi::MPEConverter.eventOut -> voiceAllocator.eventIn;
        droneMode -> voiceAllocator.droneModeIn;
        voiceAllocator.voiceEventOut -> voices.notesIn;
        myShape -> voices.shape;
        

        algorithmSelect -> voices.algoIn;
        topValue -> voices.numeratorIn;
        bottomValue -> voices.denominatorIn;
        divisor -> voices.divisorIn;
        glide -> voices.glideIn;
        attack -> voices.attackIn;
        release -> voices.releaseIn;
        baseFrequency -> voices.baseFrequencyIn;
        volume -> myGain.in;

        voices.out -> gain.in;
        gain.out-> out;
    }
}

processor myGain {
    input event float in;
    output stream float out;

    node gain = std::levels::SmoothedGain (float);
}


graph Voice {
    input event (std::notes::NoteOn, std::notes::NoteOff, std::notes::Control) notesIn;

    //there's like an inheritance thing going on / polymorphism?
    input event float32 shape;
    input event int algoIn;
    input event int numeratorIn;
    input event int denominatorIn;
    input event int divisorIn;
    input event float glideIn;
    input event float attackIn;
    input event float releaseIn;
    input event float baseFrequencyIn;
    // wave.shapeIn;
    output stream float out;
    
    // float attack = 0.1f;

    node {
        //envelope
        env = customEnvelope( 0.1f, 0.8f ); 
        // freqCalculator = FreqCalculator;
        wave = std::oscillators::PolyblepOscillator (float, std::oscillators::Shape::sine, 440);
        // calculator = freqCalculator(E::Algorithm::Arithmetic);
    }

    connection {
        notesIn -> env.eventIn;

        notesIn -> freqCalculator.eventIn;

        algoIn -> freqCalculator.algoIn;
        numeratorIn -> freqCalculator.numeratorIn;
        denominatorIn -> freqCalculator.denominatorIn;
        divisorIn -> freqCalculator.divisorIn;
        glideIn -> freqCalculator.glideIn;
        baseFrequencyIn -> freqCalculator.baseFrequencyIn;

        attackIn -> env.attackIn;
        releaseIn -> env.releaseIn;

        shape -> wave.shapeIn;
        freqCalculator.out -> wave.frequencyIn;
        env.gainOut * wave.out -> out;
    }
}

processor freqCalculator(E::Algorithm initAlgo = E::Algorithm::Arithmetic) {
    input event (std::notes::NoteOn,std::notes::NoteOff,
    std::notes::Control) eventIn;
    input event int algoIn;
    input event int numeratorIn;
    input event int denominatorIn;
    input event int divisorIn;
    input event float glideIn;
    input event float baseFrequencyIn;
    output event float out;

    event eventIn (std::notes::NoteOn e)
    {
        index = displaceIndex(int (e.pitch));
        ratio = calculateRatio(index);
        console <- calculateFrequency(ratio);
    }

    event eventIn (std::notes::Control control) {
        console <- control.control;
        if (control.control == 6) { //algo
            if(control.value < 0.33) {algo = E::Algorithm::Arithmetic;}
            else if(control.value < 0.66) {algo = E::Algorithm::Ratio;}
            else {algo = E::Algorithm::Tet;}
        } else if (control.control == 7) { // numerator
            topValue = int(ceil(control.value * 24));
        } else if (control.control == 8) { // denominator 
            bottomValue = int(ceil(control.value * 24));
        } else if (control.control == 9) { // divisor 
            divisor = int( ceil(control.value * 23) + 1);
        } else if (control.control == 10) { //glide 
            glide = ceil(control.value * 100);
        } else if (control.control == 11) { //base freq
            baseFrequency = std::notes::noteToFrequency(int(floor(control.value * 128)));
        } 
        ratio = calculateRatio(index);
    }

    event algoIn (int newAlgo) {
        let v = newAlgo;

        if (v==0) algo = E::Algorithm::Arithmetic;
        else if (v==1) algo = E::Algorithm::Ratio;
        else algo = E::Algorithm::Tet;
        ratio = calculateRatio(index);
    }

    event numeratorIn (int n) {
        topValue = n;
        ratio = calculateRatio(index);
    }

    event denominatorIn( int n ) {
        bottomValue = n;
        ratio = calculateRatio(index);
    }

    event divisorIn (int n) {
        divisor = n;
        ratio = calculateRatio(index);
    }

    event glideIn (float n) {
        glide = n;
        ratio = calculateRatio(index);
    }
    event baseFrequencyIn (float n) {
        baseFrequency = std::notes::noteToFrequency(n);
        ratio = calculateRatio(index);
    }

    int divisor = 12;
    int topValue = 2;
    int bottomValue = 1;
    float baseFrequency = 220;
    const int center = 60; //c3
    float ratio = 1;
    float glide = 1;
    int index = 60;
    E::Algorithm algo = initAlgo;
    
    int displaceIndex(int key) {
        return key - 36;
    }

    float calculateRatio(int index) {
	    float ratio = 1;
        float index_f = float(index);
        float divisor_f = float(divisor);
        float topValue_f = float(topValue);
        float bottomValue_f = float(bottomValue);

        //avoid divide by 0
        if(index_f == 0) {index_f = 1;}

		if (algo == E::Algorithm::Arithmetic) {
            ratio = ((index_f * (topValue - bottomValue)) / divisor) + bottomValue;
        } else if (algo == E::Algorithm::Ratio) {
			ratio = index_f * (topValue_f/bottomValue_f) / divisor_f;
        } else if (algo == E::Algorithm::Tet) {
            ratio = pow( pow(topValue_f / bottomValue_f, 1 / divisor_f), index_f);
        }
	
        return ratio;
        
    }

    float calculateFrequency(float ratio) {
        return ratio * baseFrequency;
    }

    void main() {
        float freq = 0;

        loop {
            //safeguarding
            if (freq < 0 || freq == inf) {freq = 0;}

            //write to output
            out <- freq;

            // GLIDE
            float difference = calculateFrequency(ratio) - freq;
            freq += 0.001f * difference / glide ;

            advance();
        }
    }
}

processor customEnvelope (float32 attackSeconds,
                    float32 releaseSeconds)
{
    input event (std::notes::NoteOn,
                    std::notes::NoteOff) eventIn;
    input event float attackIn;
    input event float releaseIn;
    input event bool droneModeIn;

    output stream float gainOut;

    //==============================================================================
    float keyDownVelocity, currentLevel;
    float attack = attackSeconds, release = releaseSeconds;
    bool envOn = true;


    event eventIn (std::notes::NoteOn noteOn) {
        keyDownVelocity = noteOn.velocity; 
    }
    event eventIn (std::notes::NoteOff noteOff) {
        keyDownVelocity = 0; 
    }
    event attackIn (float v) {
        attack = v;
    }
    event releaseIn (float v) {
        release = v;
    }

    void main()
    {
        loop
        {
            while (keyDownVelocity == 0)
                advance();

            if (attack > 0)
            {
                let attackExponent = 1.0f / int32 (attack * float32 (processor.frequency));
                let attackMultiplier = 2.0f ** -attackExponent
                                        * (2.0f + keyDownVelocity) ** attackExponent;

                while (currentLevel < keyDownVelocity)
                {
                    gainOut <- currentLevel;
                    currentLevel = attackMultiplier * (currentLevel + 2.0f) - 2.0f;
                    advance();
                }
            }
            else
            {
                currentLevel = keyDownVelocity;
            }

            while (keyDownVelocity != 0)
            {
                gainOut <- currentLevel;
                advance();
            }

            if (release > 0)
            {
                let decayFactor = pow (0.0001f, float32 (processor.period) / release);

                while (keyDownVelocity == 0 && currentLevel > 0.0001f)
                {
                    gainOut <- currentLevel;
                    currentLevel *= decayFactor;
                    advance();
                }
            }
        }
    }
}

        // at the moment we use voice stealing
    processor customVoiceAllocator (int numVoices,
                              int MPEMasterChannel = 0, bool droneModeInit = false)
    {
        //==============================================================================
        input event (std::notes::NoteOn,
                     std::notes::NoteOff,
                     std::notes::PitchBend,
                     std::notes::Slide,
                     std::notes::Pressure,
                     std::notes::Control)    eventIn;

        output event (std::notes::NoteOn,
                      std::notes::NoteOff,
                      std::notes::PitchBend,
                      std::notes::Slide,
                      std::notes::Pressure,
                      std::notes::Control)   voiceEventOut[numVoices];
        input event bool droneModeIn;

        //==============================================================================
        event eventIn (std::notes::NoteOn noteOn)
        {
            if (droneMode) {
                let oldest = findOldestIndex();
                //see if it's already on somewhere and toggle it
                for (wrap<numVoices> i) {
                    //if it's already on

                    if(noteOn.pitch == voiceState[i].pitch) {
                        //toggle
                        if(voiceState[i].isActive) {
                            voiceEventOut[i] <-  std::notes::NoteOff (voiceState[i].channel, voiceState[i].pitch,0.0f); 
                            voiceState[i].free();
                            return;
                        }
                    } 
                }

                //otherwise just turn on another note
                voiceState[oldest].start (noteOn.channel, noteOn.pitch);
                voiceEventOut[oldest] <- noteOn;


            } else {
                let oldest = findOldestIndex();

                // send a note-off when stealing a voice
                if (voiceState[oldest].isActive)
                
                voiceEventOut[oldest] <- std::notes::NoteOff (voiceState[oldest].channel, voiceState[oldest].pitch,0.0f);

                voiceState[oldest].start (noteOn.channel, noteOn.pitch);

                voiceEventOut[oldest] <- noteOn;
            }

        }

        event eventIn (std::notes::NoteOff noteOff)
        {
            if (droneMode) {
                //do nothing
            } else {
                for (wrap<numVoices> i)
                {
                    //IF THE STATE MATCHES 
                    if (voiceState[i].channel == noteOff.channel
                        && voiceState[i].pitch == noteOff.pitch)
                    {
                        if (isSustainActive (noteOff.channel))
                        {
                            voiceState[i].isReleasing = true;
                        }
                        else
                        {
                            voiceEventOut[i] <- noteOff;
                            voiceState[i].free();
                        }
                    }
                }
            }
        }

        event eventIn (std::notes::PitchBend bend)
        {
            for (wrap<numVoices> i)
                if (voiceState[i].channel == bend.channel)
                    voiceEventOut[i] <- bend;
        }

        event eventIn (std::notes::Pressure pressure)
        {
            for (wrap<numVoices> i)
                if (voiceState[i].channel == pressure.channel)
                    voiceEventOut[i] <- pressure;
        }

        event eventIn (std::notes::Slide slide)
        {
            for (wrap<numVoices> i)
                if (voiceState[i].channel == slide.channel)
                    voiceEventOut[i] <- slide;
        }

        event eventIn (std::notes::Control control)
        {
            if (control.control == 64) // 64 = sustain
            {
                bool isMPEMasterChannel = control.channel == MPEMasterChannel;
                bool sustainActive = control.value >= 0.5f;

                setChannelSustain (control.channel, sustainActive);

                if (isMPEMasterChannel)
                    mpeMasterSustainActive = sustainActive;

                if (! sustainActive)
                {
                    for (wrap<numVoices> i)
                    {
                        if ((isMPEMasterChannel || voiceState[i].channel == control.channel)
                             && voiceState[i].isActive
                             && voiceState[i].isReleasing)
                        {
                            voiceEventOut[i] <- std::notes::NoteOff (voiceState[i].channel, voiceState[i].pitch,0.0f);
                            voiceState[i].free();
                        }
                    }
                }
            } 
            else if (control.control == 12) { // droneMode
                droneMode = control.value >= 0.5f;
            }
            else
            {
                for (wrap<numVoices> i)
                    if (voiceState[i].channel == control.channel)
                        voiceEventOut[i] <- control;
            }
        }

        event droneModeIn (bool d) {
            droneMode = d;

            //turn off all voices if switching
            for( wrap<numVoices> i) {
                voiceEventOut[i] <- std::notes::NoteOff (voiceState[i].channel, voiceState[i].pitch,0.0f); 
            }
        }

        //==============================================================================
        struct VoiceState
        {
            bool isActive, isReleasing;
            int32 channel, age;
            float32 pitch;

            void start (int32 channel, float32 pitch)
            {
                this.isActive     = true;
                this.isReleasing  = false;
                this.channel      = channel;
                this.pitch        = pitch;
                this.age          = ++nextActiveTime;
            }

            void free()
            {
                this.isActive  = false;
                this.age       = ++nextInactiveTime;
            }
        }

        static_assert (numVoices > 0);
        VoiceState[numVoices] voiceState;

        int32 nextActiveTime = 0x70000000, nextInactiveTime = 1;

        bool mpeMasterSustainActive;
        int64 perChannelSustainActive; // one per bit (assumes that channel IDs are <64, and could be made more general)
        bool droneMode = droneModeInit;

        bool isSustainActive (int32 channel)
        {
            return mpeMasterSustainActive || (perChannelSustainActive & (1L << channel)) != 0;
        }

        void setChannelSustain (int32 channel, bool active)
        {
            if (active)
                perChannelSustainActive |= (1L << channel);
            else
                perChannelSustainActive &= ~(1L << channel);
        }

        wrap<numVoices> findOldestIndex()
        {
            if const (numVoices == 1)
            {
                return 0;
            }
            else
            {
                wrap<numVoices> index;
                var oldest = voiceState[0].age;

                for (wrap<numVoices> i = 1)
                {
                    let age = voiceState[i].age;

                    if (age < oldest)
                    {
                        index = i;
                        oldest = age;
                    }
                }

                return index;
            }
        }
    }